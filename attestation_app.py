import streamlit as st
import pdfplumber
import re

def analyse_attestation_nuitees(uploaded_files):
    """
    Analyse les fichiers PDF t√©l√©vers√©s pour trouver la page d'attestation des nuit√©es
    et extraire le montant total des frais d'h√©bergement.
    """
    resultats_annuels = {} # Dictionnaire pour stocker les r√©sultats : { "ann√©e": montant }

    st.header("üè† Analyse des Attestations de Nuit√©es")

    for fichier in uploaded_files:
        try:
            with pdfplumber.open(fichier) as pdf:
                page_trouvee = False
                for page_num, page in enumerate(pdf.pages):
                    text = page.extract_text()
                    if not text:
                        continue

                    # 1. Identifier la page en cherchant le titre sp√©cifique (insensible √† la casse)
                    match_titre = re.search(r"ATTESTATION DE DECOMPTE DES NUITEES POUR L'ANNEE\s+(\d{4})", text, re.IGNORECASE)
                    
                    if match_titre:
                        annee_attestation = match_titre.group(1)
                        page_trouvee = True
                        
                        # 2. Une fois la page trouv√©e, chercher la phrase avec le montant
                        # Regex pour trouver un nombre (entier ou d√©cimal avec . ou ,) apr√®s "s'√©l√®ve √†"
                        match_montant = re.search(r"s'√©l√®ve √†\s+([\d\s.,]+)\s+Euros", text, re.IGNORECASE)
                        
                        if match_montant:
                            valeur_extraite_str = match_montant.group(1)
                            # Nettoyer la cha√Æne : enlever les espaces, remplacer la virgule par un point
                            valeur_nettoyee_str = valeur_extraite_str.replace(" ", "").replace(",", ".")
                            try:
                                montant_total = float(valeur_nettoyee_str)
                                resultats_annuels[annee_attestation] = montant_total
                                st.write(f"‚úì Fichier **{fichier.name}** : Attestation pour l'ann√©e **{annee_attestation}** trouv√©e. Montant des frais : **{montant_total:.2f} ‚Ç¨**")
                            except ValueError:
                                st.warning(f"Dans {fichier.name}, une valeur a √©t√© trouv√©e pour l'ann√©e {annee_attestation} mais n'a pas pu √™tre convertie en nombre : '{valeur_extraite_str}'")
                        else:
                            st.warning(f"Dans {fichier.name}, la page d'attestation pour l'ann√©e {annee_attestation} a √©t√© trouv√©e, mais la ligne avec le montant total est manquante ou dans un format inattendu.")
                        
                        break # On a trouv√© la page, on passe au fichier suivant
                
                if not page_trouvee:
                    st.info(f"Le fichier '{fichier.name}' a √©t√© analys√©, mais aucune 'Attestation de d√©compte des nuit√©es' n'a √©t√© trouv√©e.")

        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier PDF {fichier.name} : {e}")

    # Affichage du r√©sum√© final
    if resultats_annuels:
        st.markdown("---")
        st.subheader("Synth√®se des Frais d'H√©bergement")
        
        # Trier les r√©sultats par ann√©e pour un affichage chronologique
        annees_triees = sorted(resultats_annuels.keys(), reverse=True)
        
        for annee in annees_triees:
            montant = resultats_annuels[annee]
            st.metric(label=f"Total Frais H√©bergement pour l'ann√©e {annee}", value=f"{montant:.2f} ‚Ç¨")
    else:
        st.info("Aucune information sur les frais d'h√©bergement n'a pu √™tre extraite des fichiers fournis.")
